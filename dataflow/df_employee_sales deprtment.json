{
	"name": "df_employee_sales deprtment",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_emptable",
						"type": "DatasetReference"
					},
					"name": "EMPData"
				},
				{
					"dataset": {
						"referenceName": "ds_DeptTable",
						"type": "DatasetReference"
					},
					"name": "deptdata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_empdept_blob",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_empdept_blob",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "ds_empdept_blob",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "empdeptdata"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPNO as decimal(4,0),",
				"          ENAME as string,",
				"          JOB as string,",
				"          MGR as decimal(4,0),",
				"          HIREDATE as timestamp,",
				"          SAL as decimal(7,2),",
				"          COMM as decimal(7,2),",
				"          DEPTNO as decimal(2,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     partitionBy('hash', 1)) ~> EMPData",
				"source(output(",
				"          DEPTNO as decimal(2,0),",
				"          DNAME as string,",
				"          LOC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> deptdata",
				"EMPData, deptdata join(EMPData@DEPTNO == deptdata@DEPTNO,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> empdeptdata",
				"empdeptdata split(equals(deptdata@DEPTNO,10),",
				"     equals(deptdata@DEPTNO, 30),",
				"     disjoint: false) ~> split1@(accountemployees, salesemployees, otheremployees)",
				"split1@accountemployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     partitionFileNames:['AccountEmployees'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"split1@salesemployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     partitionFileNames:['SalesdeptEmployees'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2",
				"split1@otheremployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     partitionFileNames:['Operations-Research Employees'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink3"
			]
		}
	}
}