{
	"name": "df_Assert Transformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_dummyemp",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_DeptTable",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_empdept_blob",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "assert1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empno as integer,",
				"          ename as string,",
				"          job as string,",
				"          mgr as integer,",
				"          hiredate as string,",
				"          sal as decimal(10,2),",
				"          comm as decimal(10,2),",
				"          deptno as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          DEPTNO as decimal(2,0),",
				"          DNAME as string,",
				"          LOC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1, source2 assert(expectTrue(!isNull(toDate(hiredate,'yy/M/dd')), false, 'Hiredate', null, ' check to perorm hiredate data'),",
				"     expectUnique(empno, false, 'empno', null, 'to check empno uniquness'),",
				"     expectExists(source1@deptno == source2@DEPTNO, false, 'DeptNO', null, 'to check data integrity between emp & dept')) ~> assert1",
				"assert1 derive({Error Check} = isError()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}